(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{384:function(t,s,a){"use strict";a.r(s);var e=a(45),i=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"🗳️-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🗳️-object"}},[t._v("#")]),t._v(" 🗳️ Object")]),t._v(" "),a("h2",{attrs:{id:"🧑🏼‍🚀-object을-알아야-하는-이유"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🧑🏼‍🚀-object을-알아야-하는-이유"}},[t._v("#")]),t._v(" 🧑🏼‍🚀 Object을 알아야 하는 이유")]),t._v(" "),a("p",[t._v("❗자바스크립트에서 객체를 중요하게 사용하는 이유를 모른다면")]),t._v(" "),a("h2",{attrs:{id:"🙋🏻‍♂️-이-문서를-보고-나면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🙋🏻‍♂️-이-문서를-보고-나면"}},[t._v("#")]),t._v(" 🙋🏻‍♂️ 이 문서를 보고 나면")]),t._v(" "),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 자바스크립트에서 객체가 가지는 특징을 복습하고, 모르는 부분을 찾아나설 수 있다.")])]),t._v(" "),a("h2",{attrs:{id:"object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object"}},[t._v("#")]),t._v(" Object")]),t._v(" "),a("p",[t._v("객체라는 말은 프로그래밍하면서 많이 들어보고 구현 및 사용 또한 해봤을 텐데요. 객체란 과연 무엇일까요? 객체란 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 "),a("strong",[t._v("자신의 속성을 가지고 있고 다른 것과 식별 가능한 것")]),t._v("을 의미합니다.\n객체는 속성과 동작(메소드)으로 구성되어 있습니다. 따라서 소프트웨어에서 객체를 만든다는 것은 물리적 존재나, 추상적 생각의 구현물들을 속성과 메소드로 정의하는 과정이라고 볼 수 있습니다.")]),t._v(" "),a("h2",{attrs:{id:"자바스크립트에서의-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트에서의-object"}},[t._v("#")]),t._v(" 자바스크립트에서의 Object")]),t._v(" "),a("p",[t._v("자바스크립트는 데이터 저장을 위해 원시 자료형과 객체 이 2가지 종류의 자료형을 사용합니다. 숫자나 문자열 같은 단일한 데이터를 저장하는 원시 자료형은 자바스크립트 안에서 사용하는 기본적인 데이터 저장 형태입니다. 하지만 실제 우리가 살아가는 세상의 데이터들은 이런 원시 자료형으로는 다 담을 수가 없습니다. 불가능한 것은 아니지만, 수 백개의 변수를 선언해야 하는 등 매우 비효율적일 수 있죠.")]),t._v(" "),a("p",[t._v("그리고 자바스크립트가 주 무대로 활동하는 웹에서는 다양한 데이터들이 JSON 또는 XML 등의 형태로 표현되어 전송되며, 여러 타입의 데이터가 넘어옵니다. 이런 데이터를 일일이 구분해 저장한다면 많은 처리 지연시간을 발생시키고, 비효율적인 연산 작용이 많이 필요합니다. 이런 복잡성은 서비스 사용자에게 대기시간을 발생시키고 이탈을 야기할 수도 있죠. 객체는 이러한 데이터들을 하나의 컨테이너에 담아 저장하고, 데이터에 접근할 수 있게 도와줍니다.")]),t._v(" "),a("p",[t._v("아래는 객체에 대해 이해하고 있는지 체크해볼 수 있는 내용인데요. 아래의 내용 중 알고 있는 것과 모르는 부분을 체크해보고,  학습해보면 좋을 것 같아요!")]),t._v(" "),a("h2",{attrs:{id:"✅-셀프-체크리스트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✅-셀프-체크리스트"}},[t._v("#")]),t._v(" ✅ 셀프 체크리스트")]),t._v(" "),a("h3",{attrs:{id:"_1-객체의-정의"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-객체의-정의"}},[t._v("#")]),t._v(" 1) 객체의 정의")]),t._v(" "),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 객체는 값을 저장하는, 이름이 붙은 속성으로 구성된다..")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 자바스크립트에서 거의 모든 것들은 객체와 같이 동작한다. 복합 객체는 물론, 객체와 원시값 역시 객체처럼 취급할 수 있다. 이 때문에 일부에서는 자바스크립트는 모든 것이 객체라고도 한다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 객체는 new 키워드와 함께 생성자 함수를 호출하여 만들 수 있다. 또는 literal 이라는 약식 표현을 사용해서 만들 수도 있다.")])]),t._v(" "),a("h3",{attrs:{id:"_2-객체와-원시-값"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-객체와-원시-값"}},[t._v("#")]),t._v(" 2) 객체와 원시 값")]),t._v(" "),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(' null, undefined, "string", 10, true, false는 모두 객체처럼 다루지 않으면 객체의 특성을 갖지 않는 원시값이다.')]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 원시값은 값으로 저장되고, 원시값을 복사하면 그대로 복사가 된다. 반면 객체는 참조가 저장되므로 객체를 복사하면 참조만 복사된다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 원시값은 다른 원시값과 비교할 때 값이 같은지 비교한다. 반면 객체는 다른 객체와 비교할 때 서로 똑같은 객체를 참조하고 있는지 확인한다. 즉 객체는 서로 동일한 객체를  참조하고 있을 때만 같은 것으로 본다.")])]),t._v(" "),a("h3",{attrs:{id:"_3-객체와-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-객체와-prototype"}},[t._v("#")]),t._v(" 3) 객체와 Prototype")]),t._v(" "),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 객체의 속성을 참조하면 먼저 해당 객체에 속성이 참조되어 있는지 확인하고, 참조되어있지 않으면 생성자 함수의 prototype 속성에서 찾는다. 여기서도 찾을 수 없으면 prototype은 객체이고, 객체는 Object() 생성자로부터 만들어지므로 Object() 생성자의 prototype 속성(Object.prototype)에서 속성을 찾는다. 여기서도 속성을 찾을 수 없으면 이 속성은 정의되지 않았다(undefined)고 판단한다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 자바스크립트에서는 프로토타입 체인 검색을 사용해 상속을 구현한다(이를 프로토타입 상속이라고 부른다,)")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" prototype 속성은 Object() 객체라는 사실과 객체 속성 검색 체인(=프로토타입 상속) 덕분에 모든 객체는 Object()를 상속받는다.")])]),t._v(" "),a("h3",{attrs:{id:"_4-함수와-객체에서의-스코프"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-함수와-객체에서의-스코프"}},[t._v("#")]),t._v(" 4) 함수와 객체에서의 스코프")]),t._v(" "),a("ul",{staticClass:"contains-task-list"},[a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 자바스크립트 함수는 1급 객체다. 함수는 속성과 값을 지닌 객체다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 함수 안에서 사용하는 this 키워드는 함수를 포함한 객체를 참조한다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" this의 값은 함수가 호출되는 컨텍스트에 따라 결정된다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 자바스크립트에서는 고유한 스코프를 만들기 위해 함수를 사용한다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 함수는 스코프 체인을 통해 변수를 찾는다.")]),t._v(" "),a("li",{staticClass:"task-list-item enabled"},[a("input",{staticClass:"task-list-item-checkbox",attrs:{type:"checkbox"}}),t._v(" 스코프 체인은 코드가 작성된 위치에 따라 만들어지므로 함수가 호출된 컨텍스트에는 영향을 받지 않는다. 이 덕분에 한 번 작성된 함수는 다른 컨텍스트 에서 실행되더라도 원래의 스코프에 접근할 수 있다. 이런 특성으로 인해 클로저가 만들어진다.")])]),t._v(" "),a("h2",{attrs:{id:"자바스크립트에서의-oop-object-oriented-programming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트에서의-oop-object-oriented-programming"}},[t._v("#")]),t._v(" 자바스크립트에서의 OOP(Object Oriented Programming)")]),t._v(" "),a("blockquote",[a("p",[t._v("OOP의 기본 컨셉은 프로그램 내에서 표현하고자 하는 실 세계(real world)의 일들을 객체를 사용해서 모델링하고,\n객체를 사용하지 않으면 불가능 혹은 아주 어려웠을 일들을 쉽게 처리하는 방법을 제공한다는 것입니다.  -MDN-")])]),t._v(" "),a("p",[t._v("자바스크립트에는 Object, Function, Array 등과 같이 다양한 기본 객체들이 있고, 모든 객체는 자바스크립트의 기본 객체인 Object를 확장하고 있습니다. 하지만 자바스크립트는 클래스 기반이 아니라 프로토 타입을 기반으로 하는 객체 기반의 언어입니다. 이렇게 기반이 다르기 때문에 자바스크립트를 사용하여 객체의 계층 구조를 만들고 상속하는 방법은 명확하지 않을 수 있습니다.")]),t._v(" "),a("p",[t._v("자바스크립트는 함수 기반 언어인 Scheme을 기반으로 만들어진 뒤 자바에서 다양한 프로그래밍 개념들을 가져왔는데요. 따라서 객체지향 언어는 아니지만 객체지향과 비슷한 특징들을 지원합니다. 이를 가능하게 하는 개념이 바로 "),a("strong",[t._v("프로토타입(prototype)")]),t._v(" 입니다.")]),t._v(" "),a("p",[t._v("사실 OOP와 객체지향의 클래스라는 주제는 자바스크립트의 핵심을 관통하는 내용이라고 보기는 어렵습니다. 하지만 프로그래밍 세계를 이해하는데 있어 중요한 개념이고, 자바스크립트의 데이터타입, 실행 컨텍스트, this, 클로저, 프로토타입 등을 이해하는 데 큰 도움이 됩니다.")]),t._v(" "),a("h2",{attrs:{id:"🔗-참고-링크"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🔗-참고-링크"}},[t._v("#")]),t._v(" 🔗 참고 링크")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Basics",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN_Object"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Learn/JavaScript/Objects/Object-oriented_JS",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN Object-oriented_JS"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN_상속과 프로토타입"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/Mixin",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN_Mixin"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=i.exports}}]);